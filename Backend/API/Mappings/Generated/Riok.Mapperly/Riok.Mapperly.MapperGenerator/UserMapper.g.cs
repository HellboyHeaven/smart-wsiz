// <auto-generated />
#nullable enable
namespace API.Mappings
{
    public partial class UserMapper
    {
        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "4.1.1.0")]
        public partial global::Core.Models.Users.User Map(global::API.Contracts.Requests.Auth.UserRequest request)
        {
            return request switch
            {
                global::API.Contracts.Requests.Auth.StudentRequest x => MapToStudent(x),
                global::API.Contracts.Requests.Auth.TeacherRequest x => MapToTeacher(x),
                global::API.Contracts.Requests.Auth.AdminRequest x => MapToAdmin(x),
                _ => throw new System.ArgumentException($"Cannot map {request.GetType()} to Core.Models.Users.User as there is no known derived type mapping", nameof(request)),
            };
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "4.1.1.0")]
        public partial global::API.Contracts.Responses.Auth.UserResponse Map(global::Core.Models.Users.User user)
        {
            return user switch
            {
                global::Core.Models.Users.Student x => MapToStudentResponse(x),
                global::Core.Models.Users.Teacher x => MapToTeacherResponse(x),
                _ => throw new System.ArgumentException($"Cannot map {user.GetType()} to API.Contracts.Responses.Auth.UserResponse as there is no known derived type mapping", nameof(user)),
            };
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "4.1.1.0")]
        public partial global::System.Collections.Generic.IEnumerable<global::API.Contracts.Responses.Auth.UserResponse> Map(global::System.Collections.Generic.IEnumerable<global::Core.Models.Users.User> entities)
        {
            return entities switch
            {
                global::System.Collections.Generic.IEnumerable<global::Core.Models.Users.Student> x => global::System.Linq.Enumerable.Select(x, x1 => MapToStudentResponse(x1)),
                global::System.Collections.Generic.IEnumerable<global::Core.Models.Users.Teacher> x => global::System.Linq.Enumerable.Select(x, x1 => MapToTeacherResponse(x1)),
                _ => throw new System.ArgumentException($"Cannot map {entities.GetType()} to System.Collections.Generic.IEnumerable<API.Contracts.Responses.Auth.UserResponse> as there is no known derived type mapping", nameof(entities)),
            };
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "4.1.1.0")]
        private global::Core.Models.Users.Student MapToStudent(global::API.Contracts.Requests.Auth.StudentRequest source)
        {
            var target = new global::Core.Models.Users.Student();
            target.StudentId = source.StudentId;
            target.Id = source.Id;
            target.Firstname = source.Firstname;
            target.Lastname = source.Lastname;
            target.Login = source.Login;
            target.PasswordHash = MapPassword(source.Password);
            target.Email = source.Email;
            target.Birthday = source.Birthday;
            return target;
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "4.1.1.0")]
        private global::Core.Models.Users.Teacher MapToTeacher(global::API.Contracts.Requests.Auth.TeacherRequest source)
        {
            var target = new global::Core.Models.Users.Teacher();
            target.Id = source.Id;
            target.Firstname = source.Firstname;
            target.Lastname = source.Lastname;
            target.Login = source.Login;
            target.PasswordHash = MapPassword(source.Password);
            target.Email = source.Email;
            target.Birthday = source.Birthday;
            return target;
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "4.1.1.0")]
        private global::Core.Models.Users.Admin MapToAdmin(global::API.Contracts.Requests.Auth.AdminRequest source)
        {
            var target = new global::Core.Models.Users.Admin();
            target.Id = source.Id;
            target.Firstname = source.Firstname;
            target.Lastname = source.Lastname;
            target.Login = source.Login;
            target.PasswordHash = MapPassword(source.Password);
            target.Email = source.Email;
            target.Birthday = source.Birthday;
            return target;
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "4.1.1.0")]
        private global::API.Contracts.Responses.Auth.StudentResponse MapToStudentResponse(global::Core.Models.Users.Student source)
        {
            var target = new global::API.Contracts.Responses.Auth.StudentResponse();
            target.StudentId = source.StudentId;
            target.Course = MapToCourseResponse(source.Course);
            target.Id = source.Id;
            target.Login = source.Login;
            target.Firstname = source.Firstname;
            target.Lastname = source.Lastname;
            target.Email = source.Email;
            target.Birthday = source.Birthday;
            return target;
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "4.1.1.0")]
        private global::API.Contracts.Responses.Auth.TeacherResponse MapToTeacherResponse(global::Core.Models.Users.Teacher source)
        {
            var target = new global::API.Contracts.Responses.Auth.TeacherResponse();
            target.Id = source.Id;
            target.Login = source.Login;
            target.Firstname = source.Firstname;
            target.Lastname = source.Lastname;
            target.Email = source.Email;
            target.Birthday = source.Birthday;
            return target;
        }

        [global::System.CodeDom.Compiler.GeneratedCode("Riok.Mapperly", "4.1.1.0")]
        private global::API.Contracts.Responses.Curriculum.CourseResponse MapToCourseResponse(global::Core.Models.Course source)
        {
            var target = new global::API.Contracts.Responses.Curriculum.CourseResponse(source.Id, source.Name, source.Code);
            return target;
        }
    }
}